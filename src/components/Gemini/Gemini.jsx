import React, { useState, useEffect, useRef } from 'react';
import { GoogleGenAI } from '@google/genai';
import websiteData from './webdata.json'; 

const Gemini = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([
    { role: 'ai', text: 'Xin ch√†o! T√¥i l√† AI h·ªó tr·ª£. H√£y h·ªèi t√¥i v·ªÅ website c·ªßa ch√∫ng t√¥i.' }
  ]);
  const [loading, setLoading] = useState(false);
  const chatboxRef = useRef(null);

  // L·∫•y API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (file .env)
  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
  const ai = apiKey ? new GoogleGenAI({ apiKey }) : null;

  const handleSend = async () => {
    if (!input.trim()) return;

    // Th√™m c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√†o chat
    const userMessage = { role: 'user', text: input };
    setMessages((prev) => [...prev, userMessage]);
    setLoading(true);

    const lowerInput = input.toLowerCase();
    let prompt = "";
    if (lowerInput.includes("tr∆∞·ªùng s·∫°ch") || lowerInput.includes("h∆∞·ªõng d·∫´n") || lowerInput.includes("gi·ªõi thi·ªáu")) {
      prompt = `Th√¥ng tin website:
Ti√™u ƒë·ªÅ: ${websiteData.title}
M√¥ t·∫£: ${websiteData.description}
H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng: ${websiteData.usageGuide}
Gi·ªõi thi·ªáu: ${websiteData.about.content}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi: ${input}`;
    } else {
      prompt = `${websiteData.trainingData}

Website "${websiteData.title}" cung c·∫•p c√°c th√¥ng tin v·ªÅ ph√°t tri·ªÉn b·ªÅn v·ªØng, quy√™n g√≥p cho c·ªông ƒë·ªìng v√† c√°c ho·∫°t ƒë·ªông m√¥i tr∆∞·ªùng.
M√¥ t·∫£: ${websiteData.description}
H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng: ${websiteData.usageGuide}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau d·ª±a tr√™n c√°c th√¥ng tin tr√™n: ${input}`;
    }

    try {
      if (ai) {
        const response = await ai.models.generateContent({
          model: "gemini-2.0-flash",
          contents: prompt,
        });
        setMessages((prev) => [...prev, { role: 'ai', text: response.text }]);
      } else {
        setTimeout(() => {
          setMessages((prev) => [
            ...prev,
            { role: 'ai', text: 'ƒê√¢y l√† ph·∫£n h·ªìi m·∫´u. Vui l√≤ng c·∫•u h√¨nh API Key ƒë·ªÉ s·ª≠ d·ª•ng AI th·∫≠t.' }
          ]);
          setLoading(false);
        }, 1200);
        setInput('');
        return;
      }
    } catch (error) {
      console.error("Gemini API Error:", error);
      setMessages((prev) => [
        ...prev,
        { role: 'ai', text: 'C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi Gemini AI. Vui l√≤ng th·ª≠ l·∫°i.' }
      ]);
    }

    setLoading(false);
    setInput('');
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !loading) handleSend();
  };

  const toggleChatbox = () => {
    setIsOpen(!isOpen);
  };

  useEffect(() => {
    function handleClickOutside(event) {
      if (chatboxRef.current && !chatboxRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [chatboxRef]);

  return (
    <div
      style={{
        position: "fixed",
        bottom: 20,
        right: 20,
        zIndex: 1000,
      }}
      ref={chatboxRef}
    >
      <div
        style={{
          width: 60,
          height: 60,
          borderRadius: "50%",
          background: "#01bbbf",
          color: "#fff",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          cursor: "pointer",
          boxShadow: "0 2px 10px rgba(0,0,0,0.2)",
          transition: "transform 0.2s",
          fontSize: 24,
          ...(isOpen ? { transform: "rotate(45deg)" } : {}),
        }}
        onClick={toggleChatbox}
      >
        {isOpen ? "x" : "üí¨"}
      </div>
      {isOpen && (
        <div
          style={{
            maxWidth: 400,
            borderRadius: 16,
            background: "#fff",
            boxShadow: "0 4px 24px rgba(0,0,0,0.07)",
            display: "flex",
            flexDirection: "column",
            height: 400,
            overflow: "hidden",
            marginTop: 10,
          }}
        >
          <div
            style={{
              padding: "1rem",
              borderBottom: "1px solid #e0e0e0",
              background: "#01bbbf",
              color: "#fff",
              textAlign: "center",
              fontWeight: "600",
            }}
          >
            AI Gi·∫£i ƒê√°p
          </div>
          <div
            style={{
              flex: 1,
              padding: "1rem",
              overflowY: "auto",
              background: "#f8fafc",
            }}
          >
            {messages.map((msg, idx) => (
              <div
                key={idx}
                style={{
                  margin: "0.5rem 0",
                  textAlign: msg.role === "user" ? "right" : "left",
                }}
              >
                <span
                  style={{
                    display: "inline-block",
                    padding: "0.7rem 1.2rem",
                    borderRadius: 20,
                    background: msg.role === "user" ? "#01bbbf" : "#e0f7fa",
                    color: msg.role === "user" ? "#fff" : "#222",
                    maxWidth: "80%",
                    wordBreak: "break-word",
                    fontSize: "14px",
                    lineHeight: "1.4",
                  }}
                >
                  {msg.text}
                </span>
              </div>
            ))}
            {loading && (
              <div
                style={{
                  textAlign: "left",
                  color: "#01bbbf",
                  margin: "0.5rem 0",
                  fontStyle: "italic",
                }}
              >
                <span
                  style={{
                    display: "inline-block",
                    padding: "0.7rem 1.2rem",
                    borderRadius: 20,
                    background: "#e0f7fa",
                    color: "#01bbbf",
                  }}
                >
                  ƒêang tr·∫£ l·ªùi...
                </span>
              </div>
            )}
          </div>
          <div
            style={{
              display: "flex",
              borderTop: "1px solid #e0e0e0",
              padding: "0.75rem",
              background: "#fff",
            }}
          >
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
              style={{
                flex: 1,
                border: "none",
                outline: "none",
                fontSize: 16,
                padding: "0.5rem 1rem",
                borderRadius: 20,
                background: "#f3f4f6",
              }}
              disabled={loading}
            />
            <button
              onClick={handleSend}
              disabled={loading || !input.trim()}
              style={{
                marginLeft: 8,
                background: loading || !input.trim() ? "#ccc" : "#01bbbf",
                color: "#fff",
                border: "none",
                borderRadius: 20,
                padding: "0.5rem 1.5rem",
                fontWeight: 600,
                fontSize: 16,
                cursor: loading || !input.trim() ? "not-allowed" : "pointer",
                transition: "background 0.2s",
              }}
            >
              {loading ? "..." : "G·ª≠i"}
            </button>
          </div>
          {!apiKey && (
            <div
              style={{
                padding: "0.5rem",
                background: "#fff3cd",
                color: "#856404",
                fontSize: "12px",
                textAlign: "center",
                borderTop: "1px solid #e0e0e0",
              }}
            >
              ‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API Key - ƒëang d√πng ch·∫ø ƒë·ªô demo
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default Gemini;